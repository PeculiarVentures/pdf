import * as assert from "assert";
import { Convert } from "pvtsutils";
import { Crypto } from "@peculiar/webcrypto";
import * as x509 from "@peculiar/x509";
import { CertificateChain } from "./CertificateChain";
import { CMSSignedData } from "./SignedData";

x509.cryptoProvider.set(new Crypto() as globalThis.Crypto);

context("CertificateChain", () => {

  const cmsHex = "30820b9b06092a864886f70d010702a0820b8c30820b88020100310030020600a0820b79308202c0308201a8a003020102020101300d06092a864886f70d01010b050030123110300e06035504031307526f6f74204341301e170d3139313233313231303030305a170d3230303130313231303030305a30123110300e06035504031307526f6f7420434130820122300d06092a864886f70d01010105000382010f003082010a0282010100d1a950bd421439591989ee91aeb51817bb339d0899eecc49cdd3b2f00d086a48b2859bb06d23ccb216fee8998b1a4cd60bda4e4ac2e28ffa591b4f2c59b25eede34af2a786efa2efaeafbc6d17edab1f16ab149198d947ed58f14f30638e38326ab5b2fa8b6b5740862f21d6103df3798c41b89c7fdccd57c57f7230a098dc822f698a89bde6df250eef037fbc2c7119e2e02b28104c7b97915fe744a3cc761da64aabef05952095140db2848108d2e22585e1b563e40496120597c562c2516d0e406204e856935c381bb3b029e91405af628e08342b6d3dcfed398ca6fd8c685a4743b180a2e5c5afb77dc2b328be245ef92a4a558ea40aa2297ea47a9ef65f0203010001a321301f301d0603551d0e041604141d74d2aa94b5e769a890703e79ab2cfbb73d1ec5300d06092a864886f70d01010b05000382010100764a20f3c1cc56e9a1c2d62175f88834397b27a1b636c5195bce405d0425ed10ef0cc01a0008427ed9dc1fa60e5e18aeaf8ec3b5c44c4f7f4522df7d750952a9f7ced5824ddc04d2ef1c983af9363bc3725087525d13048795480b91b5e434408de80280af95670376ac11be8747b665a7c65c8a65fbf2ea8667a7179a48d2bff7b57cb212df562612b3a76fe4c77a083866bd676696905eed74446b3306ad132570c31b7da6cc302b5b4e9ad32edd9023ad77fcd4298dedf530dc79edf24e12d192b13b0a6eea0d5df8bea08c14e0784f6c0f288d3e175c5780e09f47df44129d9ae99e3185929731c7df9529741d54ee251aecd804b2303f87e544f13816a5308202ec308201d4a003020102020101300d06092a864886f70d01010b050030123110300e06035504031307526f6f74204341301e170d3139313233313231303030305a170d3230303130313231303030305a301d311b301906035504031312496e7465726d65646961746520434120233130820122300d06092a864886f70d01010105000382010f003082010a0282010100ece0d39f3cf2b32b0a7721f016cf7df11e45552232e7896c871054b48b9349b833ba942b85e96ecf11641c265f85c4cadc27c5a5478bcbf591ef724649f65ddd4d5655cecc287ea0d8a72e85e5fa06a854b3a91ca96bdbf56f7836ecc489d877d7d8d655fd2f0251a0fd9302751c0cdbe5afcbcb427ca3c9108973b1765deed18cda00db91648e0982f41bb01ec0a8c45a402b5532161eb0c13230fa2e9f7a2b4a022264a40a40f361c11128655be9d46d2ee5e97512d86d8026cf6c50dd7d29793d127c9977ebd55aacfbcff3589acff48211803cc1016191fe8b99f99560f4a24486f4fcfb37fdad396efff08a39387d320288a251460705a30ec8821a762b0203010001a3423040301d0603551d0e04160414a6341939b96ae23f1ac4d543862c23305e921405301f0603551d230418301680141d74d2aa94b5e769a890703e79ab2cfbb73d1ec5300d06092a864886f70d01010b0500038201010035517ff518f6f4cd0ed57b8ec47ce3dbe7466c541d62336c3a66d3313902bbc9499a2b1e468cb3e63b45cc3e9d01576037cd9419bfe1d1e8ccba92340682e0d75ab203f7a150ff4f409ed645bd8cdf18230b3a6482e0608b4da9f417a1e845115365f3d6d4e57816886c59098b7b0569fb92e0168b44467446976f0b908043d80bba28eb20bc1d4ea129070ae4d0f961757db56dad52360c2584e31c96a0c683494277cd6fc0acba004484ec3b3bf8be69b10cbac89f5bbd0aed617c2c94093285fd30eb5a314eed2485f7632f81a0a7dafced46975ac77c88324c207b9b0a783f38721efb6a0ddf60dafbe6bed7d3730cdcc39150ebdffb0c22d33146047c39308202f9308201e1a003020102020101300d06092a864886f70d01010b0500301d311b301906035504031312496e7465726d656469617465204341202331301e170d3139313233313231303030305a170d3230303130313231303030305a301f311d301b06035504031314496e7465726d6564696174652043412023312e3130820122300d06092a864886f70d01010105000382010f003082010a0282010100d7bf8c90b888b5e83c7915ee34271f6f866edb08b7ba4345ab2485dfc924a349d9df0f0797d69479a329ca6e9ae9f64aa3108d6e7df6f7d69dcefbcb35f5d7924d993b4f8630a41facbce4d45fb8bd6b6dca2fe8aa6881f46e5e8ccf55656edab321e07835adaf72ffe1dea35731041400d5c395e56d5199d81f409ab4fcbc47419492b6a71597fbddc303de9d5740c163e06448af3a790abe8936bc9e4de6aa7bba1ebed3be405f2f9cb298b058bb5f2389bcf98bf5dcbae6f5d1e500224705600efc81560064188f6132790f72b23609eb70cdbfc6c1a5e3c89ba5589ab1bf885195e0958f98bcb1dab024dc26eab9cf3fd79ac8ce1b8dcfb04a1d16be02250203010001a3423040301d0603551d0e041604146e801b7d4fe868315bc7f5c3cfabceb13f950e3a301f0603551d23041830168014a6341939b96ae23f1ac4d543862c23305e921405300d06092a864886f70d01010b0500038201010063f82929b4ba1057fbaa75a7c135cc78f875edcce897a2e544c0a9ee1380800bd164d5f8f36279477f1c8fef4d9ef8c97b0ec2c374ce124ab67b01cfea81cd9594ee0f0e82a1e2bd4930425d36e36c75496604660874ef8d8d7a36a5939a1c4f9d3a2df4d66c67659a6986034795411b3501488ddc69af7bf6442735695bdc3db7146ea1fe1314e0056329cb4bd834939c245337d7061ceadca7af44c578f15156edbd6aac776740bae28acbd1a1aa0973fcea2762bea899dacae5c9f0bfe3258f0c331466402c5de40222a73b2db5a1277aa4910107f8c63d9680dfc49002b451617879aaa46a5bce9dca9b11683866378a2a82a5d65723283f13cceff3d5df308202c4308201aca003020102020101300d06092a864886f70d01010b050030143112301006035504031309436c69656e74202332301e170d3139313233313231303030305a170d3230303130313231303030305a30143112301006035504031309436c69656e7420233230820122300d06092a864886f70d01010105000382010f003082010a0282010100ad9b306037b41ffbdbca8118f7a6f23a6f5753f22f02e30df03ba5d227f912c6907ab87ba67219c30c0851ef92bcd0ae711b9e5c5c35f8a760a6e94c3da07bb8746665d0b3dca176e59f466a4796b14a9e7839991aac93453520c7667af92a6c8da0f3e9f391e6047878562dd8d814c492e33b675688fcb7ef6fa6c82abe8ddb9fa3da6c67dc575765a5431bd33f9ba4885339b042f723748cb529df3fb578cb12878471ce27ebc15310a38dd2acdfa3c3424b635f575368c67b928afb9eff2c9b9d56e545ecc521f5f189d22e55884183e4384f5cddd5bdee1903146e49eae35b7abb0319ef1e91134f64801623dcc0e4d355caddee41a1af080af4728348390203010001a321301f301d0603551d0e041604142d46d36ad331b4785ff0cf07084ca97433207eec300d06092a864886f70d01010b0500038201010083d831c5652c6b4f1403495d59f8beb31bdb985f897bb77f49bcb0f9a0212464f4e6add2d04bd84ed832603d0a15a3772e371aa9a06883313aec1898f1a6058fe69ca9e13c120c32b0d22c00640ee16e4fde6b80cf65b77b94105a2cdcc385d8a9e485724074531f17a4fb55f4073e9f424769a4721fe63d31b5bc7cff81eb845ef469df8fc78b9e229083927fce6e79c4ed00cf2e2fbb49d787656d5dc992f9087088afd0a4363b2e97a76085652f0fa5b98f3fab0b39e4f653cb0f6b145b247a94e913793e52d718a8478fb87aacceba83610ef6eff4bbae71e2b3e65a7280ee48cd39cc90056d66771ddfaaaea4bc6591c37b3c133c68f189cddb4b49ecbc3100";
  const cms = Convert.FromHex(cmsHex);

  it("verify", async () => {
    const signedData = CMSSignedData.fromBER(cms);

    const chain = new CertificateChain();
    chain.certificateHandler = signedData.certificateHandler;
    const res = await chain.build(signedData.certificates[3], { checkDate: new Date("2020-01-01 12:00:00") });
    assert.strictEqual(res.result, false);
  });

});
