import { PDFDocument } from "@peculiar/pdf-doc";
import {
  PDFRepairRegistry,
  IRepairRule,
  globalRepairRegistry
} from "./PDFRepairRegistry";

/**
 * An object that records repair notes for a PDF file. The keys are rule IDs and the values are arrays of strings
 * containing the repair notes.
 */
interface RepairNotes {
  [key: string]: string[];
}

/**
 * A class for repairing PDF documents by applying a set of rules to them.
 */
export class PDFRepair {
  private rules: IRepairRule[] = [];

  constructor(
    registry: PDFRepairRegistry = globalRepairRegistry,
    ruleIds?: string[]
  ) {
    this.rules = registry.getRules(ruleIds);
  }

  /**
   * Repairs a PDF document by applying a set of rules to it.
   * @param doc - The PDF document to repair.
   * @returns An array of strings representing the repair notes generated by the applied rules.
   */
  async repairDocument(doc: PDFDocument): Promise<RepairNotes> {
    const repairNotes: RepairNotes = {};

    for (const rule of this.rules) {
      const notes = await rule.apply(doc);
      if (notes.length) {
        if (repairNotes[rule.id]) {
          throw new Error(`Rule '${rule.id}' returned multiple repair notes.`);
        }
        repairNotes[rule.id] = notes;
      }
    }

    return repairNotes;
  }
}
